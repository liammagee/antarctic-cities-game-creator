[{"__type__":"cc.EffectAsset","_name":"CountryMaskEffect","techniques":[{"passes":[{"blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"time":{"value":[0.5],"type":13},"resolution":{"value":[1,1],"type":14},"u_percentageLoss":{"value":[100],"type":13},"u_percentagePrep":{"value":[100],"type":13},"u_zoom":{"value":[1],"type":13},"u_cellSize":{"value":[10],"type":13},"u_randFactor":{"value":[0.8],"type":13},"u_randAlpha":{"value":[0.8],"type":13},"u_sizePower":{"value":[3],"type":13},"u_sizeMultiplier":{"value":[1.75],"type":13},"u_stepMin":{"value":[0.25],"type":13},"u_stepMax":{"value":[1],"type":13},"u_borderRadius":{"value":[0.001],"type":13}},"program":"CountryMaskEffect|vs|fs"}]}],"shaders":[{"hash":3331307163,"glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform VARS {\n  vec4 u_colorForLoss;\n  vec4 u_colorForPreparedness;\n  vec2 u_location;\n  vec2 resolution;\n  float time;\n  float u_threshold;\n  float u_percentageLoss;\n  float u_percentagePrep;\n  float u_selected;\n  float u_zoom;\n  float u_dotSize;\n  float u_cellSize;\n  float u_randFactor;\n  float u_randAlpha;\n  float u_sizePower;\n  float u_sizeMultiplier;\n  float u_stepMin;\n  float u_stepMax;\n  float u_borderRadius;\n};\nfloat rand(vec2 st) {\n    return fract(sin(dot(st, vec2(12.839, 78.149))) * 43758.5453);\n}\nfloat randForCell(vec2 coord, vec2 offset) {\n    vec2 cellCoords = vec2(floor((coord.x + offset.x) / u_cellSize), floor((coord.y + offset.y) / u_cellSize));\n    return rand(cellCoords);\n}\nfloat cell(vec2 coord, vec2 offset, vec2 shift) {\n    vec2 cellCoords = vec2(floor((coord.x + offset.x) / u_cellSize), floor((coord.y + offset.y) / u_cellSize));\n    vec2 cellDist = vec2(mod((coord.x + offset.x), u_cellSize), mod((coord.y + offset.y), u_cellSize));\n    float r = 1.0 - rand(cellCoords + shift) * u_randFactor;\n    cellDist -= u_cellSize / 2.0 * r;\n    cellDist = offset - cellDist;\n    cellDist /= u_cellSize / 2.0;\n    float cd = length(cellDist);\n    float size = 1. / (u_sizeMultiplier * pow(r, u_sizePower));\n    return 1. - smoothstep(u_stepMin, u_stepMax, cd * size * r);\n}\nfloat textureAlpha(vec2 coord) {\n    float alpha = 1.-randForCell(-coord, vec2(0., 0.)) * u_randAlpha;\n    return alpha * texture(texture, v_uv0).a;\n}\nfloat cellIntensity(vec2 coord, vec2 offset, vec2 shift) {\n    return cell(coord, offset, shift) * textureAlpha(coord + offset);\n}\nfloat dotIntensity(vec2 coord, vec2 shift) {\n    coord -= shift;\n    float di = 0.;\n    di += cellIntensity(coord, vec2(0., 0.), shift);\n    di += cellIntensity(coord, vec2(0., u_cellSize), shift);\n    di += cellIntensity(coord, vec2(0., -u_cellSize), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, 0.), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, 0.), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, u_cellSize), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, -u_cellSize), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, u_cellSize), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, -u_cellSize), shift);\n    return di;\n}\nvec4 makeBorder(vec2 coord) {\n    float radius = (u_borderRadius * u_borderRadius) / (resolution.x * resolution.y);\n    vec3 greyDark = vec3(42.0 / 255.0, 54.0 / 255.0, 68.0 / 255.0);\n    vec4 accum = texture(texture, (coord.xy));\n    accum += texture(texture, (coord.xy + vec2(0., radius)));\n    accum += texture(texture, (coord.xy + vec2(0., - radius)));\n    accum += texture(texture, (coord.xy + vec2(radius, 0.)));\n    accum += texture(texture, (coord.xy + vec2(- radius, 0.)));\n    accum += texture(texture, (coord.xy + vec2(- radius, - radius)));\n    accum += texture(texture, (coord.xy + vec2(radius, - radius)));\n    accum += texture(texture, (coord.xy + vec2(radius, radius)));\n    accum += texture(texture, (coord.xy + vec2(- radius, radius)));\n    accum /= 9.;\n    accum = 1.0 - (abs(0.5 - accum) * 2.);\n    accum.rgb = greyDark * accum.a;\n    accum *= u_selected;\n    return accum;\n}\nvec4 overlay(vec4 under, vec4 over) {\n    return over.a * over + ((1.-length(over.rgb)*over.a) * under);\n}\nvoid main () {\n  vec4 mask = vec4(0.);\n  vec4 o = vec4(1.);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 border = makeBorder(uv);\n  vec3 cities = vec3(smoothstep(0.42, 0.42, texture(texture, v_uv0.xy)));\n  vec2 st = gl_FragCoord.xy - u_location.xy / u_zoom;\n  float di1 = dotIntensity(st, vec2(0., 0.));\n  float di2 = dotIntensity(st, vec2(u_cellSize * 0.5, u_cellSize * 0.5));\n  float v1 = ( 1.0 - u_percentageLoss / 100.0 );\n  v1 = v1 * v1 * v1;\n  float v2 = ( 1.0 - u_percentagePrep / 100.0 );\n  v2 = v2 * v2 * v2;\n  mask = border;\n  vec4 color1 = vec4(di1, 0., 0., di1);\n  color1 *= 1. - v1;\n  vec4 color2 = vec4(0., di2, 0., di2);\n  color2 *= 1. - v2;\n  mask = overlay(mask, color1);\n  mask = overlay(mask, color2);\n  ALPHA_TEST(o);\n  gl_FragColor = mask;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 u_location;\nuniform vec2 resolution;\nuniform float u_percentageLoss;\nuniform float u_percentagePrep;\nuniform float u_selected;\nuniform float u_zoom;\nuniform float u_cellSize;\nuniform float u_randFactor;\nuniform float u_randAlpha;\nuniform float u_sizePower;\nuniform float u_sizeMultiplier;\nuniform float u_stepMin;\nuniform float u_stepMax;\nuniform float u_borderRadius;\nfloat rand(vec2 st) {\n    return fract(sin(dot(st, vec2(12.839, 78.149))) * 43758.5453);\n}\nfloat randForCell(vec2 coord, vec2 offset) {\n    vec2 cellCoords = vec2(floor((coord.x + offset.x) / u_cellSize), floor((coord.y + offset.y) / u_cellSize));\n    return rand(cellCoords);\n}\nfloat cell(vec2 coord, vec2 offset, vec2 shift) {\n    vec2 cellCoords = vec2(floor((coord.x + offset.x) / u_cellSize), floor((coord.y + offset.y) / u_cellSize));\n    vec2 cellDist = vec2(mod((coord.x + offset.x), u_cellSize), mod((coord.y + offset.y), u_cellSize));\n    float r = 1.0 - rand(cellCoords + shift) * u_randFactor;\n    cellDist -= u_cellSize / 2.0 * r;\n    cellDist = offset - cellDist;\n    cellDist /= u_cellSize / 2.0;\n    float cd = length(cellDist);\n    float size = 1. / (u_sizeMultiplier * pow(r, u_sizePower));\n    return 1. - smoothstep(u_stepMin, u_stepMax, cd * size * r);\n}\nfloat textureAlpha(vec2 coord) {\n    float alpha = 1.-randForCell(-coord, vec2(0., 0.)) * u_randAlpha;\n    return alpha * texture2D(texture, v_uv0).a;\n}\nfloat cellIntensity(vec2 coord, vec2 offset, vec2 shift) {\n    return cell(coord, offset, shift) * textureAlpha(coord + offset);\n}\nfloat dotIntensity(vec2 coord, vec2 shift) {\n    coord -= shift;\n    float di = 0.;\n    di += cellIntensity(coord, vec2(0., 0.), shift);\n    di += cellIntensity(coord, vec2(0., u_cellSize), shift);\n    di += cellIntensity(coord, vec2(0., -u_cellSize), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, 0.), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, 0.), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, u_cellSize), shift);\n    di += cellIntensity(coord, vec2(u_cellSize, -u_cellSize), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, u_cellSize), shift);\n    di += cellIntensity(coord, vec2(-u_cellSize, -u_cellSize), shift);\n    return di;\n}\nvec4 makeBorder(vec2 coord) {\n    float radius = (u_borderRadius * u_borderRadius) / (resolution.x * resolution.y);\n    vec3 greyDark = vec3(42.0 / 255.0, 54.0 / 255.0, 68.0 / 255.0);\n    vec4 accum = texture2D(texture, (coord.xy));\n    accum += texture2D(texture, (coord.xy + vec2(0., radius)));\n    accum += texture2D(texture, (coord.xy + vec2(0., - radius)));\n    accum += texture2D(texture, (coord.xy + vec2(radius, 0.)));\n    accum += texture2D(texture, (coord.xy + vec2(- radius, 0.)));\n    accum += texture2D(texture, (coord.xy + vec2(- radius, - radius)));\n    accum += texture2D(texture, (coord.xy + vec2(radius, - radius)));\n    accum += texture2D(texture, (coord.xy + vec2(radius, radius)));\n    accum += texture2D(texture, (coord.xy + vec2(- radius, radius)));\n    accum /= 9.;\n    accum = 1.0 - (abs(0.5 - accum) * 2.);\n    accum.rgb = greyDark * accum.a;\n    accum *= u_selected;\n    return accum;\n}\nvec4 overlay(vec4 under, vec4 over) {\n    return over.a * over + ((1.-length(over.rgb)*over.a) * under);\n}\nvoid main () {\n  vec4 mask = vec4(0.);\n  vec4 o = vec4(1.);\n  vec2 uv = v_uv0;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, uv);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, uv + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  vec4 border = makeBorder(uv);\n  vec3 cities = vec3(smoothstep(0.42, 0.42, texture2D(texture, v_uv0.xy)));\n  vec2 st = gl_FragCoord.xy - u_location.xy / u_zoom;\n  float di1 = dotIntensity(st, vec2(0., 0.));\n  float di2 = dotIntensity(st, vec2(u_cellSize * 0.5, u_cellSize * 0.5));\n  float v1 = ( 1.0 - u_percentageLoss / 100.0 );\n  v1 = v1 * v1 * v1;\n  float v2 = ( 1.0 - u_percentagePrep / 100.0 );\n  v2 = v2 * v2 * v2;\n  mask = border;\n  vec4 color1 = vec4(di1, 0., 0., di1);\n  color1 *= 1. - v1;\n  vec4 color2 = vec4(0., di2, 0., di2);\n  color2 *= 1. - v2;\n  mask = overlay(mask, color1);\n  mask = overlay(mask, color2);\n  ALPHA_TEST(o);\n  gl_FragColor = mask;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"],"binding":0},{"name":"VARS","members":[{"name":"u_colorForLoss","type":16,"count":1},{"name":"u_colorForPreparedness","type":16,"count":1},{"name":"u_location","type":14,"count":1},{"name":"resolution","type":14,"count":1},{"name":"time","type":13,"count":1},{"name":"u_threshold","type":13,"count":1},{"name":"u_percentageLoss","type":13,"count":1},{"name":"u_percentagePrep","type":13,"count":1},{"name":"u_selected","type":13,"count":1},{"name":"u_zoom","type":13,"count":1},{"name":"u_dotSize","type":13,"count":1},{"name":"u_cellSize","type":13,"count":1},{"name":"u_randFactor","type":13,"count":1},{"name":"u_randAlpha","type":13,"count":1},{"name":"u_sizePower","type":13,"count":1},{"name":"u_sizeMultiplier","type":13,"count":1},{"name":"u_stepMin","type":13,"count":1},{"name":"u_stepMax","type":13,"count":1},{"name":"u_borderRadius","type":13,"count":1}],"defines":[],"binding":1}],"samplers":[{"name":"texture","type":29,"count":1,"defines":["USE_TEXTURE"],"binding":30}],"record":null,"name":"CountryMaskEffect|vs|fs"}]},{"__type__":"cc.TTFFont","_name":"Arvo-Regular","_native":"Arvo-Regular.ttf"},{"__type__":"cc.Material","_name":"CountryMask","_effectAsset":{"__uuid__":"6d6zdLb01PhYZMBvOm7aeV"},"_techniqueData":{"0":{"defines":{"USE_TEXTURE":true},"props":{"u_percentageLoss":0,"u_percentagePrep":0}}}}]